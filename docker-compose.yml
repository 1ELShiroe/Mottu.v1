version: "3.9"

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: always
    networks:
      - mottu-network
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      - mottu-network

  mongo1:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "${MONGO1_PORT}:27017"
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
      - mottu-network
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
      
  mongo2:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - "${MONGO2_PORT}:27018"
    volumes:
      - mongo2_data:/data/db
      - mongo2_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
      - mottu-network

  mongo3:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - "${MONGO3_PORT}:27019"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
      - mottu-network

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
      - mottu-network

  consumer-saga:
    image: ${DOCKER_REGISTRY-}mottu-consumers
    build:
      context: .
      dockerfile: ./src/Consumer/Dockerfile
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-admin}
      DBCONN_MONGOOSE: "mongodb://${MONGO_HOSTS}/${MONGO_DB}?replicaSet=${MONGO_REPLICA_SET}"
    networks:
      - mottu-network
      - app-network

  consumer-api:
    image: ${DOCKER_REGISTRY-}mottu-api
    ports:
      - "5000:8080"
    build:
      context: .
      dockerfile: ./src/Api/Dockerfile
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-admin}
      DBCONN_MONGOOSE: ${DBCONN_MONGOOSE}
      DBCONN_POSTGRES: ${DBCONN_POSTGRES}
      # MinIO
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_API_PORT: ${MINIO_API_PORT}
      MINIO_CONSOLE_PORT: ${MINIO_CONSOLE_PORT}

      # RabbitMQ
      RABBITMQ_AMQP_PORT: ${RABBITMQ_AMQP_PORT}
      RABBITMQ_MANAGEMENT_PORT: ${RABBITMQ_MANAGEMENT_PORT}
    networks:
      - mottu-network
      - app-network

networks:
  app-network:
    driver: bridge
  mottu-network:
    driver: bridge

volumes:
  minio_data:
  postgres-data:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
